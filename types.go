package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"log"
)

const (
	// Modified StormBuffer to fit these values instead of original values
	MPQ_HASH_FILE_KEY = 0x000
	MPQ_HASH_KEY2_MIX = 0x100

	// Decryption keys for MPQ tables
	MPQ_KEY_HASH_TABLE  = 0xC3AF3770 // Obtained by HashString("(hash table)", MPQ_HASH_FILE_KEY)
	MPQ_KEY_BLOCK_TABLE = 0xEC83B3A3 // Obtained by HashString("(block table)", MPQ_HASH_FILE_KEY)

	// We only supports IMPLODE_BINARY and IMPLODE_DICT_4K as these are the only ones needed for diablo 1
	IMPLODE_BINARY  = 0
	IMPLODE_ASCII   = 1
	IMPLODE_DICT_1K = 4
	IMPLODE_DICT_2K = 5
	IMPLODE_DICT_4K = 6

	// We only use MPQ_FILE_IMPLODE, MPQ_FILE_ENCRYPTED and MPQ_FILE_FIX_KEY
	MPQ_FILE_IMPLODE       = 0x00000100 // Implode method (By PKWARE Data Compression Library)
	MPQ_FILE_COMPRESS      = 0x00000200 // File is compressed using combination of compression methods
	MPQ_FILE_COMPRESSED    = 0x0000FF00 // File is compressed
	MPQ_FILE_ENCRYPTED     = 0x00010000 // Indicates whether file is encrypted
	MPQ_FILE_FIX_KEY       = 0x00020000 // File decrypt seed has to be fixed (The decryption key for the file is altered according to the position of the file in the archive)
	MPQ_FILE_PATCH_FILE    = 0x00100000 // The file contains incremental patch for an existing file in base MPQ
	MPQ_FILE_SINGLE_UNIT   = 0x01000000 // Instead of being divided to 0x1000-bytes blocks, the file is stored as single unit
	MPQ_FILE_DELETE_MARKER = 0x02000000 // The file is 0 or 1 byte long and its name is a hash. File is a deletion marker, indicating that the file no longer exists.
	MPQ_FILE_HAS_EXTRA     = 0x04000000 // File has checksums for each sector (explained in the File Data section). Ignored if file is not compressed or imploded
	MPQ_FILE_EXISTS        = 0x80000000 // Set if file exists, reset when the file was deleted
	MPQ_FILE_VALID_FLAGS   = MPQ_FILE_IMPLODE | MPQ_FILE_COMPRESS | MPQ_FILE_ENCRYPTED | MPQ_FILE_FIX_KEY | MPQ_FILE_SINGLE_UNIT | MPQ_FILE_DELETE_MARKER | MPQ_FILE_HAS_EXTRA | MPQ_FILE_EXISTS

	// Compression types for multilpe compressions, none of these are used in diablo 1
	MPQ_COMPRESSION_HUFFMANN    = 0x01 // Huffmann compression (used on WAVE files only)
	MPQ_COMPRESSION_ZLIB        = 0x02 // ZLIB compression
	MPQ_COMPRESSION_PKWARE      = 0x08 // PKWARE DCL compression
	MPQ_COMPRESSION_BZIP2       = 0x10 // BZIP2 compression
	MPQ_COMPRESSION_WAVE_MONO   = 0x40 //
	MPQ_COMPRESSION_WAVE_STEREO = 0x80 //
)

type Mpq struct {
	RawData     []byte
	Header      MpqHeader
	HashTable   []MPQHash
	BlockTable  []MPQBlock
	PrecalcList map[FilePrecalc]string
	FileList    [][]byte
}

type FilePrecalc struct {
	Name1 uint32
	Name2 uint32
}

type MpqHeader struct {
	// The ID_MPQ ('MPQ\x1A') signature
	MpqMagicBytes [4]byte

	// Size of the archive header
	HeaderSize uint32

	// Size of MPQ archive
	// This field is deprecated in the Burning Crusade MoPaQ format, and the size of the archive
	// is calculated as the size from the beginning of the archive to the end of the hash table,
	// block table, or extended block table (whichever is largest).
	ArchiveSize uint32

	// 0 = Original format
	// 1 = Extended format (The Burning Crusade and newer)
	FormatVersion uint16

	// Power of two exponent specifying the number of 512-byte disk sectors in each logical sector
	// in the archive. The size of each logical sector in the archive is 512 * 2^SectorSizeShift.
	// Bugs in the Storm library dictate that this should always be 3 (4096 byte sectors).
	SectorSize uint16

	// Offset to the beginning of the hash table, relative to the beginning of the archive.
	HashTablePos uint32

	// Offset to the beginning of the block table, relative to the beginning of the archive.
	BlockTabletPos uint32

	// Number of entries in the hash table. Must be a power of two, and must be less than 2^16 for
	// the original MoPaQ format, or less than 2^20 for the Burning Crusade format.
	HashTableSize uint32

	// Number of entries in the block table
	BlockTableSize uint32
}

// Hash entry. All files in the archive are searched by their hashes.
type MPQHash struct {
	// The hash of the file path, using method A.
	Name1 uint32

	// The hash of the file path, using method B.
	Name2 uint32

	// The language of the file. This is a Windows LANGID data type, and uses the same values.
	// 0 indicates the default language (American English), or that the file is language-neutral.
	Locale uint32 //uint16 // Locale and Platform switch places if not little endian format

	// The platform the file is used for. 0 indicates the default platform.
	// No other values have been observed.
	//Platform uint16

	// If the hash table entry is valid, this is the index into the block table of the file.
	// Otherwise, one of the following two values:
	//  - FFFFFFFFh: Hash table entry is empty, and has always been empty.
	//               Terminates searches for a given file.
	//  - FFFFFFFEh: Hash table entry is empty, but was valid at some point (a deleted file).
	//               Does not terminate searches for a given file.
	BlockIndex uint32
}

// File description block contains informations about the file
type MPQBlock struct {
	// Offset of the beginning of the block, relative to the beginning of the archive.
	FilePos uint32

	// Compressed file size
	CompressedSize uint32

	// Only valid if the block is a file; otherwise meaningless, and should be 0.
	// If the file is compressed, this is the size of the uncompressed file data.
	FileSize uint32

	// Flags for the file. See MPQ_FILE_XXXX constants
	Flags uint32

	// Added for convinience
	Name string
}

// Only needed if using worker goroutines in main
type fileEntry struct {
	index uint32
	name  string
}

func NewMpq(data []byte) (m Mpq, err error) {
	start := bytes.Index(data, []byte{'M', 'P', 'Q', 0x1A})
	if start == -1 {
		return Mpq{}, fmt.Errorf("Not valid MPQ file\n")
	}
	m.RawData = data[start:]
	m.Header = m.getHeaderFromData()
	if m.Header.SectorSize != 0x03 {
		return Mpq{}, fmt.Errorf("Invalid Sector Size, only supports Sector size of 4096 bytes\n")
	}
	m.HashTable = m.getHashTable()
	m.BlockTable = m.getBlockTable()
	m.PrecalcList = setLookup
	return
}

func (m Mpq) getHeaderFromData() (header MpqHeader) {
	readHeader := bytes.NewReader(m.RawData[:0x20])
	if binary.Read(readHeader, binary.LittleEndian, &header) != nil {
		log.Fatalln("binary.Read Failed")
	}
	return
}

func (m Mpq) getHashTable() (block []MPQHash) {
	data := m.RawData[m.Header.HashTablePos : m.Header.HashTablePos+m.Header.HashTableSize*16]

	DecryptBlock(data, MPQ_KEY_HASH_TABLE)

	// One MPQHash is 3 uint32 values and 2 uint16 values
	block = make([]MPQHash, len(data)/16)

	for k := range block {
		block[k].Name1 = binary.LittleEndian.Uint32(data[k*16 : k*16+4])
		block[k].Name2 = binary.LittleEndian.Uint32(data[k*16+4 : k*16+8])
		block[k].Locale = binary.LittleEndian.Uint32(data[k*16+8 : k*16+12])
		block[k].BlockIndex = binary.LittleEndian.Uint32(data[k*16+12 : k*16+16])
	}
	return
}

func (m Mpq) getBlockTable() (block []MPQBlock) {
	data := m.RawData[m.Header.BlockTabletPos : m.Header.BlockTabletPos+m.Header.BlockTableSize*16]
	DecryptBlock(data, MPQ_KEY_BLOCK_TABLE)

	// One MPQBlock is 4 uint32 values
	block = make([]MPQBlock, len(data)/16)

	// One MPQBlockis 4 uint32 values
	for k := range block {
		block[k].FilePos = binary.LittleEndian.Uint32(data[k*16 : k*16+4])
		block[k].CompressedSize = binary.LittleEndian.Uint32(data[k*16+4 : k*16+8])
		block[k].FileSize = binary.LittleEndian.Uint32(data[k*16+8 : k*16+12])
		block[k].Flags = binary.LittleEndian.Uint32(data[k*16+12 : k*16+16])
	}
	return
}

// Base values used for the copy length
var s_LenBase []uint32 = []uint32{
	0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009,
	0x000a, 0x000c, 0x0010, 0x0018, 0x0028, 0x0048, 0x0088, 0x0108,
}

// Lengths of extra bits used to represent the copy length
var s_ExLenBits []uint32 = []uint32{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
}

var AsciiToUpperTable = []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x5C,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
}

var StormBuffer = []uint32{0x15f261d3, 0xa84c2d0d, 0x50f185a6, 0x33ba41d5, 0x39791013, 0x4baff44e, 0xeeeeaa1c, 0xe0488314,
	0x559ccd2b, 0xa104f445, 0x636f37c4, 0x264d5e3b, 0x75c17f35, 0x75424131, 0xbb115739, 0x74fe755a,
	0x7d3a7aa6, 0x2d8be784, 0x83ed154a, 0xfc2673d8, 0x44dd4a7f, 0x79056cc8, 0x82cc8831, 0x9d3c1b7c,
	0xe9453bfa, 0x24315694, 0x661f3253, 0x75549f5c, 0xbb2b63ed, 0x67e00d96, 0xf48966c7, 0x0d7bea56,
	0xc25f92ef, 0xa947a79d, 0xde4adf6f, 0xac0f0342, 0xd3eb246b, 0xa4aa118e, 0x3c3e6a46, 0x457f4441,
	0xa50a406f, 0x6c508d9f, 0xe9ac18e7, 0x1ecdb4ba, 0x39ac7e3a, 0x7fb304fa, 0x6f38f8e8, 0x4aecea6d,
	0x61035e73, 0x81708907, 0xebc07205, 0x90fd7614, 0xb52d217f, 0x6c4de195, 0x1dd49084, 0x64ee482c,
	0x94c7a521, 0x540c09d8, 0x75df8dd5, 0x414131f7, 0x3698fd76, 0xf784db4f, 0xf8c97a03, 0x048f39b9,
	0x3bf4f0bd, 0x8cb50992, 0x9b58d9ee, 0xe5ab79cc, 0x9a5f6052, 0xbd9591b0, 0xfad2232b, 0x5a632254,
	0x0286e618, 0x8ad3c8f7, 0xe4060176, 0x754c4617, 0x5c10490b, 0x6f7d6fff, 0x2187b42a, 0x5775095b,
	0x02f4c663, 0x5a5dca06, 0xfe4ad4c7, 0x53e19f7d, 0x59ff46b5, 0xbcc42ba5, 0xfd2f4a97, 0xbed6d905,
	0x95629b6b, 0x21a1c0db, 0xaa10b45d, 0xe6ef6d58, 0x2892cf4d, 0x9fed6c10, 0x1e386bf7, 0x9be0c6e8,
	0x2b2f15ef, 0x19f5ac7b, 0x7aff0e72, 0x31da576f, 0x30252cb4, 0x577960ac, 0x166e9e5a, 0xa9374a61,
	0x71369c96, 0x7ff826ae, 0xe8175326, 0xcabbfd33, 0x0191190e, 0x699d3c3e, 0x36b40b22, 0xb3950513,
	0x9b889bfa, 0xa52a5007, 0xac290fed, 0x3b4e4a4f, 0xb753d8d6, 0x3c531f22, 0x582f6427, 0xa9cd93a9,
	0x546e39ae, 0x242faad2, 0xd2e0f747, 0x09f6325d, 0x59d48719, 0xad7eb66e, 0xd5512878, 0x56debf9d,
	0x5107e5a5, 0xf1c00aa4, 0x814ccca8, 0x600d90f0, 0x9be97619, 0x915fa5f2, 0x2b5628dd, 0xa33d5f5a,
	0x595df7c1, 0x6966215d, 0x50ec8337, 0xf1d21372, 0x0ee2eefb, 0xad9e70b7, 0xab0d2fe4, 0xcf277b5d,
	0x62585a2c, 0x835a7844, 0x74b1fa6b, 0x49baffd5, 0x2ea9c864, 0x129311a8, 0xbdfa1867, 0x83ca5997,
	0x9d1db719, 0x84bb79e6, 0x9e3f99f2, 0x313f6101, 0x1b99245b, 0xd15d8fb2, 0xcef90f81, 0x2945268d,
	0xdbbcf573, 0xb1021886, 0x9ee7ec1d, 0x1cf824f7, 0x7eaa2e32, 0x69c0a2b5, 0x7494419c, 0xe253d7d3,
	0x48da3d12, 0x45b8b571, 0xdb4d147a, 0xd82d8dde, 0x265d10a2, 0xb0a6eb9a, 0x7e1c93a6, 0x36fe2f46,
	0xdcad6b00, 0x05439191, 0xb0ce5484, 0x61d1c309, 0x8da62a03, 0x06d0fe2f, 0xbac6dd3c, 0xca2006f3,
	0x8321b1af, 0x0411a6f3, 0xe8918eac, 0x21a2c152, 0x91c0d54f, 0x6aaa14fa, 0xdd22a440, 0x88cb2075,
	0x7a4eb813, 0x67afa071, 0xd8d98c9c, 0x31f10d47, 0x6ff1a8a8, 0x2faaf0a1, 0x48a221bb, 0x3be6948b,
	0xaa79e79b, 0x0ea7278c, 0x7a3857ef, 0x49b7fe55, 0xd51cb931, 0x041c018d, 0x00b90501, 0x45ea7881,
	0x8fc1dbcf, 0xb80b32a9, 0xabacd2e9, 0x677bdc40, 0xecace542, 0x6d6514eb, 0x31c09ff7, 0x5e6c1abd,
	0x1c391d0f, 0x0e9d77f1, 0x7119392d, 0x6be9b0ba, 0x6194fa77, 0x45e62148, 0x42234af2, 0xc3239d66,
	0x939cbdbc, 0x56200d9c, 0x6b275208, 0x001a61f3, 0xccc2a546, 0x4b722be0, 0xee25f2b7, 0x6d86cf9e,
	0xaa6be0cd, 0x4dcda7b6, 0x78d4aa13, 0x36ea7ad9, 0x3f29d700, 0xdeea2d84, 0x6a6af5bd, 0x18afb81c,
	0xd8e4e73c, 0x8aa708ba, 0x658b94d9, 0xa676478c, 0xcfa10c22, 0x25593c74, 0x8d962235, 0x5f980270,
	0x3df6ebc0, 0x8e7d92fa, 0xc3ee55e1, 0xd5f72447, 0x02b0fa95, 0x52b0b520, 0x70d2c11f, 0x3a6fdd6c,
	0x193aa698, 0x5496f7d5, 0x4208931b, 0x7a4106ec, 0x83e86840, 0xf49b6f8c, 0xba3d9a51, 0x55f54ddd,
	0x2de51372, 0x9afb571b, 0x3ab35406, 0xad64ff1f, 0xc77764fe, 0x7f864466, 0x416d9cd4, 0xa2489278,
	0xe30b86e4, 0x0b5231b6, 0xba67aed6, 0xe5ab2467, 0x60028b90, 0x1d9e20c6, 0x2a7c692a, 0x6b691cdb,
	0x9e51f817, 0x9b763dec, 0x3d29323f, 0xcfe12b68, 0x754b459b, 0xa2238047, 0xd9c55514, 0x6bdcffc1,
	0x693e6340, 0x82383fe7, 0x1916ea5f, 0xec7bcd59, 0x72de165a, 0xe79a1617, 0x8ec86234, 0xa8f0d284,
	0x20c90226, 0x7bf98884, 0x28a58331, 0x3ec3fa6e, 0x4ce0895b, 0xc353b4d0, 0x33ef064f, 0x21e5e210,
	0xc8bb589d, 0xe85dcab2, 0xac65829f, 0xa7bf92d0, 0x05a6174d, 0x25a50c2e, 0xe5c78777, 0x3d75021f,
	0x4baa9c98, 0x23bdc884, 0x9653bbd7, 0xbadce7f5, 0xc283a484, 0xc040df2e, 0x9370a841, 0x2f316022,
	0x36eed231, 0xac2cbc0c, 0x13c0a49b, 0xcdd12997, 0x07fe91b2, 0xcd7eabcd, 0x2c01271d, 0x18432df8,
	0x599c6bc7, 0x75e93d5a, 0xb67a6ee2, 0x8e738e16, 0xff9073fd, 0xaf77026a, 0xf86ea2fc, 0x91509ea3,
	0x33a78dc6, 0x4f79234a, 0x3a7535bc, 0x3539fcb1, 0x3103ee52, 0x4f6f1e69, 0x6bb3ebbc, 0x4cb77555,
	0x8dd1e999, 0x2ade439d, 0x11521fae, 0xb94d2545, 0x8dde9abd, 0x1909393f, 0xb792a23d, 0x749c455b,
	0xb5b60f2c, 0x380459ce, 0x0dad5820, 0xb130845b, 0x291cbd52, 0xde9a5bb7, 0x51def961, 0x515b6408,
	0xca6e823e, 0x382e6e74, 0xeebe3d71, 0x4c8f0c6a, 0xe676dcea, 0x14e1dc7c, 0x6f7fc634, 0xcf85a943,
	0xd39ea96e, 0x136e7c93, 0x7164b304, 0xf32f1333, 0x35c34034, 0xde39d721, 0x91a87439, 0xc410111f,
	0x29f17aac, 0x1316a6ff, 0x12f194ee, 0x420b9499, 0xf72db0dc, 0x690b9f93, 0x17d14bb2, 0x8f931ab8,
	0x217500bc, 0x875413f8, 0x98b2e43d, 0xc51f9571, 0x54cebdca, 0x0719cc79, 0xf3c7080d, 0xe4286771,
	0xa3eab3cd, 0x4a6b00e0, 0x11cf0759, 0x7e897379, 0x5b32876c, 0x5e8cd4f6, 0x0cedfa64, 0x919ac2c7,
	0xb214f3b3, 0x0e89c38c, 0xf0c43a39, 0xeae10522, 0x835bce06, 0x9eec43c2, 0xea26a9d6, 0x69531821,
	0x6725b24a, 0xda81b0e2, 0xd5b4ae33, 0x080f99fb, 0x15a83daf, 0x29dfc720, 0x91e1900f, 0x28163d58,
	0x83d107a2, 0x4eac149a, 0x9f71da18, 0x61d5c4fa, 0xe3ab2a5f, 0xc7b0d63f, 0xb3cc752a, 0x61ebcfb6,
	0x26ffb52a, 0xed789e3f, 0xaa3bc958, 0x455a8788, 0xc9c082a9, 0x0a1bef0e, 0xc29a5a7e, 0x150d4735,
	0x943809e0, 0x69215510, 0xef0b0da9, 0x3b4e9fb3, 0xd8b5d04c, 0xc7a023a8, 0xb0d50288, 0x64821375,
	0xc260e8cf, 0x8496bd2c, 0xff4f5435, 0x0fb5560c, 0x7cd74a52, 0x93589c80, 0x88975c47, 0x83bda89d,
	0x8bcc4296, 0x01b82c21, 0xfd821dbf, 0x26520b47, 0x04983e19, 0xd3e1ca27, 0x782c580f, 0x326ff573,
	0xc157bcc7, 0x4f5e6b84, 0x44ebfbfb, 0xda26d9d8, 0x6cd9d08e, 0x1719f1d8, 0x715c0487, 0x2c2d3c92,
	0x53faaba9, 0xbc836146, 0x510c92d6, 0xe089f82a, 0x4680171f, 0x369f00de, 0x70ec2331, 0x0e253d55,
	0xdafb9717, 0xe5dd922d, 0x95915d21, 0xa0202f96, 0xa161cc47, 0xeacfa6f1, 0xed5e9189, 0xdab87684,
	0xa4b76d4a, 0xfa704897, 0x631f10ba, 0xd39da8f9, 0x5db4c0e4, 0x16fde42a, 0x2dff7580, 0xb56fec7e,
	0xc3ffb370, 0x8e6f36bc, 0x6097d459, 0x514d5d36, 0xa5a737e2, 0x3977b9b3, 0xfd31a0ca, 0x903368db,
	0xe8370d61, 0x98109520, 0xade23cac, 0x99f82e04, 0x41de7ea3, 0x84a1c295, 0x09191be0, 0x30930d02,
	0x1c9fa44a, 0xc406b6d7, 0xeedca152, 0x6149809c, 0xb0099ef4, 0xc5f653a5, 0x4c10790d, 0x7303286c,
}
